CREATE DATABASE IF NOT EXISTS Tixora;

USE  Tixora;

CREATE TABLE IF NOT EXISTS USERS 
(
    USERNAME        VARCHAR(30)     PRIMARY KEY,
    NAME            VARCHAR(100),
    PHONE_NUMBER    VARCHAR(10),
    AGE             INT,
    EMAIL_ID        VARCHAR(30),
    PASSWORD        VARCHAR(30)
);

CREATE TABLE IF NOT EXISTS EVENTS
(
    EVENT_ID        VARCHAR(30)     PRIMARY KEY,
    EVENT_TYPE      VARCHAR(30),
    EVENT_NAME      VARCHAR(100),
    VENUE_ID        VARCHAR(30),
    LOCATION        VARCHAR(30),
    PERFRORMER_ID   VARCHAR(30),
    DATE_AND_TIME   DATETIME
);

CREATE TABLE  IF NOT EXISTS VENUE 
(
    VENUE_ID        VARCHAR(30)     PRIMARY KEY,
    VENUE_NAME      VARCHAR(100),
    EVENT_ID        VARCHAR(30),
    TOTAL_CAPACITY  INT,
    TOTAL_AVAILABLE INT,
    FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS CLASS 
(
    CLASS_ID                VARCHAR(30)     PRIMARY KEY,
    CLASS_NAME              VARCHAR(30),
    TOTAL_SEATS_AVAILABLE   INT,
    COST                    DECIMAL(10,2),
    EVENT_ID                VARCHAR(30),
    FOREIGN KEY (EVENT_ID)  REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PERFORMER 
(
    PERFORMER_ID            VARCHAR(30)     PRIMARY KEY,
    PERFORMER_NAME          VARCHAR(100),
    PERFORMER_RATING        DECIMAL(3,1)
);

CREATE TABLE IF NOT EXISTS BOOKINGS 
(
    USERNAME                VARCHAR(30) ,
    BOOKING_ID              VARCHAR(30)  UNIQUE,
    EVENT_ID                VARCHAR(30),
    TICKET_COUNT            INT,
    TICKETS_VALUE           INT,
    STATUS                  INT,
    CLASS_ID                VARCHAR(30),
    DATE_AND_TIME           DATETIME,
    primary key(username,BOOKING_ID,event_id),
    FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME),
    FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID)
);

CREATE TABLE IF NOT EXISTS TRANSACTION_DETAILS 
(
    TRANSACTION_ID          VARCHAR(30) ,
    BOOKING_ID              VARCHAR(30),
    AMOUNT_PAID             DECIMAL(10,2),
    STATUS                  VARCHAR(20),
    DIRECTION               VARCHAR(100),
    TRANSACTION_TIMESTAMP   DATETIME,
    primary key(booking_id,transaction_id),
    FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS(BOOKING_ID)
);










--   CREATE TABLE  IF NOT EXISTS SEAT_INFO (
--       SEAT_ID VARCHAR(30) PRIMARY KEY,
--       EVENT_ID VARCHAR(30),
--       VENUE_ID VARCHAR(30),
--       CLASS_ID VARCHAR(30),
--       is_booked BOOLEAN,
--       FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID),
--       FOREIGN KEY (VENUE_ID) REFERENCES VENUE(VENUE_ID),
--      FOREIGN KEY (CLASS_ID) REFERENCES CLASS(CLASS_ID)
--  );
-- CREATE TABLE IF NOT EXISTS FEEDBACK (
--     FEEDBACK_ID VARCHAR(30) PRIMARY KEY,
--     EVENT_ID VARCHAR(30),
--     VENUE_RATING DECIMAL(3,1),
--     EVENT_RATING DECIMAL(3,1),
--     FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID)
-- );
-- CREATE TABLE USER_EVENTS(
--     user_id VARCHAR(30),
--     event_id VARCHAR(30),
--     PRIMARY KEY {user_id,event_id},
--     FOREIGN KEY (user_id) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
--         FOREIGN KEY (event_id) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE
-- );
